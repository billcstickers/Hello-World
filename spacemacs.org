#+Title: My ORG-anised .spacemacs
#+Author: Chris
#+PROPERTY: header-args :tangle ".spacemacs"
# #+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://gongzhitaao.org/orgcss/org.css"/>
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup

* Introduction

This is an org file that uses [[https://orgmode.org/worg/org-contrib/babel/intro.html][Org-Babel]] literate programming paridims. To
=tangle= the =.spacemacs= out of this file use =C-c C-v t=. To view this file as
a html page use =,eeho=

* Layers
Configuration Layers declaration.
You should not put any user code in this function besides modifying the variable
values.

** Spacemacs Varient
Select the spacemacs distribution. Currently there are two: 'spacemacs-base' and
'spacemacs'. The latter is the complete batteries.
#+BEGIN_SRC emacs-lisp
;; -*- mode: emacs-lisp -*-
  (defun dotspacemacs/layers ()
    (setq-default
    ;; options are `spacemacs'
     dotspacemacs-distribution 'spacemacs
#+END_SRC

** Lazy loading
Possible values are `all', `unused'and `nil'.
If non-nil layers with lazy install support are lazy installed.

Finally, list of additional paths where to look for configuration layers.
Paths must have a trailing slash (i.e. `~/.mycontribs/')

  #+BEGIN_SRC emacs-lisp
     dotspacemacs-enable-lazy-installation 'unused
     dotspacemacs-ask-for-lazy-installation t
     dotspacemacs-configuration-layer-path '()
  #+END_SRC

** Layers
List of configuration layers to load.

Keep this section relativly simple. You dont want to load every layer under the sun. You do need to load some layers for exporting that you might not expect. I.e. Html, for the html export.
The complete list of layers is at [[https://www.spacemacs.org/layers/LAYERS.html][the spacemacs site]]

#+BEGIN_SRC emacs-lisp
     dotspacemacs-configuration-layers
     '(
       html
       javascript
       markdown
       helm
       auto-completion
       emacs-lisp
       deft
       markdown
       org
       themes-megapack
       spell-checking
       )
#+END_SRC

** Additional Packages
List of additional packages that will be installed without being
wrapped in a layer. If you need some configuration for these
packages, then consider creating a layer. You can also put the
configuration in `dotspacemacs/user-config'.

#+BEGIN_SRC emacs-lisp
     dotspacemacs-additional-packages '(
                                        org-bullets ;; not sure why this is here.
                                        olivetti
                                        )
     #+END_SRC

** Frozen Packages
A list of packages that cannot be updated.

#+BEGIN_SRC emacs-lisp
     dotspacemacs-frozen-packages '(
                                    ;; nothing here yet.
                                   )
#+END_SRC

** Excluded Packages
A list of packages that will not be installed and loaded.

#+BEGIN_SRC emacs-lisp
     dotspacemacs-excluded-packages '() ;; nothing here yet.
#+END_SRC

** Install Behaviour
Defines the behaviour of Spacemacs when installing packages.

Possible values are `used-only', `used-but-keep-unused' and `all'.
`used-only' installs only explicitly used packages and uninstall any
unused packages as well as their unused dependencies.
`used-but-keep-unused' installs only the used packages but won't uninstall
them if they become unused. `all' installs *all* packages supported by
Spacemacs and never uninstall them. (default is `used-only')

#+BEGIN_SRC emacs-lisp
    dotspacemacs-install-packages 'used-only))
#+END_SRC

* Init
Initialization function.

This function is called at the very startup of Spacemacs initialization before layers configuration.

You should not put any user code in there besides modifying the variable values."

This setq-default sexp is an exhaustive list of all the supported spacemacs settings.

#+BEGIN_SRC emacs-lisp
  (defun dotspacemacs/init ()
    (setq-default
#+END_SRC

** elpa Stuff
   Use https. Timeout after 5 seconds. Don't check for updates because we're on develop branch and it might break something.
#+BEGIN_SRC emacs-lisp
     dotspacemacs-elpa-https t
     dotspacemacs-elpa-timeout 5
     dotspacemacs-check-for-update nil
     dotspacemacs-elpa-subdirectory nil
#+END_SRC

** Editing Style
Vim obviously.
#+BEGIN_SRC emacs-lisp
     dotspacemacs-editing-style 'vim
#+END_SRC

** Load up
#+BEGIN_SRC emacs-lisp
     dotspacemacs-verbose-loading nil
     dotspacemacs-startup-banner 'official ;; Options are `official' or `random'
     ;; Possible values for list-type are: `recents' `bookmarks' `projects' `agenda' `todos'."
     dotspacemacs-startup-lists '((recents . 5)
                                  (agenda . 5)
                                  (projects . 7))
     dotspacemacs-startup-buffer-responsive t
     dotspacemacs-scratch-mode 'text-mode
     dotspacemacs-loading-progress-bar t
     dotspacemacs-fullscreen-at-startup nil
     dotspacemacs-fullscreen-use-non-native nil
     dotspacemacs-maximized-at-startup nil

#+END_SRC

** Themes
List of themes, the first of the list is loaded when spacemacs starts.

Press <SPC> T n to cycle to the next theme in the list (works great with 2 themes variants, one dark and one light)

#+BEGIN_SRC emacs-lisp
     dotspacemacs-themes '(spacemacs-dark
                           spacemacs-light)
     ;; If non nil the cursor color matches the state color in GUI Emacs.
     dotspacemacs-colorize-cursor-according-to-state t
#+END_SRC
** Font
Default font, or prioritized list of fonts. `powerline-scale' allows to
quickly tweak the mode-line size to make separators look not too crappy.

#+BEGIN_SRC emacs-lisp
     dotspacemacs-default-font '("Source Code Pro"
                                 :size 13
                                 :weight normal
                                 :width normal
                                 :powerline-scale 1.1)
#+END_SRC

** Keys
#+BEGIN_SRC emacs-lisp
     dotspacemacs-leader-key "SPC"
     dotspacemacs-emacs-command-key "SPC"
     dotspacemacs-ex-command-key ":"
     dotspacemacs-emacs-leader-key "M-m"
     ;; Major mode leader key is a shortcut key which is the equivalent of
     ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
     dotspacemacs-major-mode-leader-key ","
     ;; Major mode leader key accessible in `emacs state' and `insert state'.
     dotspacemacs-major-mode-emacs-leader-key "C-M-m"
     dotspacemacs-distinguish-gui-tab nil
     ;; If non nil `Y' is remapped to `y$' in Evil states. (default nil)
     dotspacemacs-remap-Y-to-y$ nil
     dotspacemacs-retain-visual-state-on-shift t
     ;; If non-nil, J and K move lines up and down when in visual mode.
     ;; (default nil)
     dotspacemacs-visual-line-move-text nil
     ;; If non nil, inverse the meaning of `g' in `:substitute' Evil ex-command.
     ;; (default nil)
     dotspacemacs-ex-substitute-global nil
#+END_SRC

** Layouts
#+BEGIN_SRC emacs-lisp
     ;; Name of the default layout (default "Default")
     dotspacemacs-default-layout-name "Default"
     ;; If non nil the default layout name is displayed in the mode-line.
     ;; (default nil)
     dotspacemacs-display-default-layout nil
     ;; If non nil then the last auto saved layouts are resume automatically upon
     ;; start. (default nil)
     dotspacemacs-auto-resume-layouts nil
#+END_SRC

** Files

#+BEGIN_SRC emacs-lisp
     dotspacemacs-large-file-size 1
     dotspacemacs-auto-save-file-location 'cache ;; Options are `original', `cache' `nil'
     dotspacemacs-max-rollback-slots 5
#+END_SRC

** Helm
#+BEGIN_SRC emacs-lisp
     dotspacemacs-helm-resize nil ;; If non nil, `helm' will try to minimize the space it uses. (default nil)
     dotspacemacs-helm-no-header nil ;; if non nil, the helm header is hidden when there is only one source.
     dotspacemacs-helm-position 'bottom ;; Options are `bottom', `top', `left' `right'
     dotspacemacs-helm-use-fuzzy 'always ;; Options are `always', `source', `nil'
     dotspacemacs-enable-paste-transient-state nil
     ;; Which-key delay in seconds. The which-key buffer is the popup listing
     ;; the commands bound to the current keystroke sequence. (default 0.4)
     dotspacemacs-which-key-delay 0.4
     ;; Which-key frame position. Possible values are `right', `bottom' and
     ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
     ;; right; if there is insufficient space it displays it at the bottom.
     ;; (default 'bottom)
     dotspacemacs-which-key-position 'bottom
#+END_SRC

** Visual Stuff

#+BEGIN_SRC emacs-lisp
     ;; A value from the range (0..100), in increasing opacity, which describes
     ;; the transparency level of a frame when it's active or selected.
     ;; Transparency can be toggled through `toggle-transparency'. (default 90)
     dotspacemacs-active-transparency 90
     ;; A value from the range (0..100), in increasing opacity, which describes
     ;; the transparency level of a frame when it's inactive or deselected.
     ;; Transparency can be toggled through `toggle-transparency'. (default 90)
     dotspacemacs-inactive-transparency 90
     ;; If non nil show the titles of transient states. (default t)
     dotspacemacs-show-transient-state-title t
     ;; If non nil show the color guide hint for transient state keys. (default t)
     dotspacemacs-show-transient-state-color-guide t
     ;; If non nil unicode symbols are displayed in the mode line. (default t)
     dotspacemacs-mode-line-unicode-symbols t
     ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
     ;; scrolling overrides the default behavior of Emacs which recenters point
     ;; when it reaches the top or bottom of the screen. (default t)
#+END_SRC

** Scrolling

#+BEGIN_SRC emacs-lisp
     dotspacemacs-smooth-scrolling t
#+END_SRC

** Line Numbers
#+BEGIN_SRC emacs-lisp
     ;; Control line numbers activation.
     ;; If set to `t' or `relative' line numbers are turned on in all `prog-mode' and
     ;; `text-mode' derivatives. If set to `relative', line numbers are relative.
     ;; This variable can also be set to a property list for finer control:
     ;; '(:relative nil
     ;;   :disabled-for-modes dired-mode
     ;;                       doc-view-mode
     ;;                       markdown-mode
     ;;                       org-mode
     ;;                       pdf-view-mode
     ;;                       text-mode
     ;;   :size-limit-kb 1000)
     ;; (default nil)
     dotspacemacs-line-numbers nil
#+END_SRC

** Evil modes?

#+BEGIN_SRC emacs-lisp
     ;; Code folding method. Possible values are `evil' and `origami'.
     ;; (default 'evil)
     dotspacemacs-folding-method 'evil
     ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
     ;; (default nil)
     dotspacemacs-smartparens-strict-mode nil
     ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes
     ;; over any automatically added closing parenthesis, bracket, quote, etc…
     ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil)
     dotspacemacs-smart-closing-parenthesis nil
     ;; Select a scope to highlight delimiters. Possible values are `any',
     ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
     ;; emphasis the current one). (default 'all)
     dotspacemacs-highlight-delimiters 'all
     dotspacemacs-persistent-server nil ;; If non nil, advise quit functions to keep server open when quitting.
     dotspacemacs-search-tools '("ag" "pt" "ack" "grep") ;; Supported tools are `ag', `pt', `ack' and `grep'.
     dotspacemacs-default-package-repository nil ;; not yet used
     dotspacemacs-whitespace-cleanup 'trailing ;; options are `all' `trailing', `changed' `nil'
     ))
#+END_SRC

* User Init
    "Initialization function for user code.
  It is called immediately after `dotspacemacs/init', before layer configuration
  executes.
   This function is mostly useful for variables that need to be set
  before packages are loaded. If you are unsure, you should try in setting them in
  `dotspacemacs/user-config' first."
#+BEGIN_SRC emacs-lisp
  (defun dotspacemacs/user-init ()
;; nothing here yet.
    )
#+END_SRC

* User Config
    "Configuration function for user code.
  This function is called at the very end of Spacemacs initialization after
  layers configuration.
  This is the place where most of your configurations should be done. Unless it is
  explicitly specified that a variable should be set before a package is loaded,
  you should place your code here."

#+BEGIN_SRC emacs-lisp
  (defun dotspacemacs/user-config ()
#+END_SRC
** Olivetti

Olivetti puts all the buffer text in the middle, so that there’s some breathing space around the edges, like a book. body-width makes the text take up 85% of the buffer and the add-hook makes all text-based files like .org, .md, and .txt open automatically in olivetti mode. You can also set this per buffer with =SPC-SPC olivetti-mode= and =SPC-SPC  olivetti-set-width=.

#+BEGIN_SRC emacs-lisp
  (setq olivetti-body-width 120)
  (add-hook 'text-mode-hook 'olivetti-mode)
  )
#+END_SRC

* Custom Variables
#+BEGIN_SRC emacs-lisp
  ;; Do not write anything past this comment. This is where Emacs will
  ;; auto-generate custom variable definitions.
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(ansi-color-faces-vector
     [default bold shadow italic underline bold bold-italic bold])
   '(ansi-color-names-vector
     ["#0a0814" "#f2241f" "#67b11d" "#b1951d" "#4f97d7" "#a31db1" "#28def0" "#b2b2b2"])
   '(compilation-message-face (quote default))
   '(cua-global-mark-cursor-color "#2aa198")
   '(cua-normal-cursor-color "#839496")
   '(cua-overwrite-cursor-color "#b58900")
   '(cua-read-only-cursor-color "#859900")
   '(cursor-type (quote bar))
   '(custom-safe-themes
     (quote
      ("d71f6c718dab453b625c407adc50479867a557668d5c21599a1ebea204d9e4f3" "88049c35e4a6cedd4437ff6b093230b687d8a1fb65408ef17bfcf9b7338734f6" default)))
   '(evil-want-Y-yank-to-eol nil)
   '(highlight-changes-colors (quote ("#d33682" "#6c71c4")))
   '(highlight-symbol-colors
     (quote
      ("#3b6b40f432d6" "#07b9463c4d36" "#47a3341e358a" "#1d873c3f56d5" "#2d86441c3361" "#43b7362d3199" "#061d417f59d7")))
   '(highlight-symbol-foreground-color "#93a1a1")
   '(highlight-tail-colors
     (quote
      (("#073642" . 0)
       ("#5b7300" . 20)
       ("#007d76" . 30)
       ("#0061a8" . 50)
       ("#866300" . 60)
       ("#992700" . 70)
       ("#a00559" . 85)
       ("#073642" . 100))))
   '(hl-bg-colors
     (quote
      ("#866300" "#992700" "#a7020a" "#a00559" "#243e9b" "#0061a8" "#007d76" "#5b7300")))
   '(hl-fg-colors
     (quote
      ("#002b36" "#002b36" "#002b36" "#002b36" "#002b36" "#002b36" "#002b36" "#002b36")))
   '(hl-sexp-background-color "#1c1f26")
   '(lsp-ui-doc-border "#93a1a1")
   '(nrepl-message-colors
     (quote
      ("#dc322f" "#cb4b16" "#b58900" "#5b7300" "#b3c34d" "#0061a8" "#2aa198" "#d33682" "#6c71c4")))
   '(org-agenda-files (quote ("~/.emacs.d/layers/+emacs/org/notes.org")))
   '(package-selected-packages
     (quote
      (doom-themes flyspell-correct-helm flyspell-correct auto-dictionary deft selectric-mode typit mmt sudoku pacmacs 2048-game helm-company helm-c-yasnippet fuzzy company-web web-completion-data company-tern dash-functional tern company-statistics company auto-yasnippet ac-ispell auto-complete zenburn-theme zen-and-art-theme white-sand-theme underwater-theme ujelly-theme twilight-theme twilight-bright-theme twilight-anti-bright-theme toxi-theme tao-theme tangotango-theme tango-plus-theme tango-2-theme sunny-day-theme sublime-themes subatomic256-theme subatomic-theme spacegray-theme soothe-theme solarized-theme soft-stone-theme soft-morning-theme soft-charcoal-theme smyx-theme seti-theme reverse-theme rebecca-theme railscasts-theme purple-haze-theme professional-theme planet-theme phoenix-dark-pink-theme phoenix-dark-mono-theme organic-green-theme omtose-phellack-theme oldlace-theme occidental-theme obsidian-theme noctilux-theme naquadah-theme mustang-theme monokai-theme monochrome-theme molokai-theme moe-theme minimal-theme material-theme majapahit-theme madhat2r-theme lush-theme light-soap-theme jbeans-theme jazz-theme ir-black-theme inkpot-theme heroku-theme hemisu-theme hc-zenburn-theme gruvbox-theme gruber-darker-theme grandshell-theme gotham-theme gandalf-theme flatui-theme flatland-theme farmhouse-theme exotica-theme espresso-theme dracula-theme django-theme darktooth-theme autothemer darkokai-theme darkmine-theme darkburn-theme dakrone-theme cyberpunk-theme color-theme-sanityinc-tomorrow color-theme-sanityinc-solarized clues-theme cherry-blossom-theme busybee-theme bubbleberry-theme birds-of-paradise-plus-theme badwolf-theme apropospriate-theme anti-zenburn-theme ample-zen-theme ample-theme alect-themes afternoon-theme tagedit slim-mode scss-mode sass-mode pug-mode helm-css-scss haml-mode emmet-mode web-beautify livid-mode skewer-mode simple-httpd json-mode json-snatcher json-reformat js2-refactor yasnippet multiple-cursors js2-mode js-doc coffee-mode org-projectile org-category-capture org-present org-pomodoro alert log4e gntp org-mime org-download htmlize gnuplot mmm-mode markdown-toc markdown-mode gh-md ws-butler winum which-key volatile-highlights vi-tilde-fringe uuidgen use-package toc-org spaceline powerline restart-emacs request rainbow-delimiters popwin persp-mode pcre2el paradox spinner org-plus-contrib org-bullets open-junk-file neotree move-text macrostep lorem-ipsum linum-relative link-hint indent-guide hydra lv hungry-delete hl-todo highlight-parentheses highlight-numbers parent-mode highlight-indentation helm-themes helm-swoop helm-projectile projectile pkg-info epl helm-mode-manager helm-make helm-flx helm-descbinds helm-ag google-translate golden-ratio flx-ido flx fill-column-indicator fancy-battery eyebrowse expand-region exec-path-from-shell evil-visualstar evil-visual-mark-mode evil-unimpaired evil-tutor evil-surround evil-search-highlight-persist highlight evil-numbers evil-nerd-commenter evil-mc evil-matchit evil-lisp-state smartparens evil-indent-plus evil-iedit-state iedit evil-exchange evil-escape evil-ediff evil-args evil-anzu anzu evil goto-chg undo-tree eval-sexp-fu elisp-slime-nav dumb-jump f dash s diminish define-word column-enforce-mode clean-aindent-mode bind-map bind-key auto-highlight-symbol auto-compile packed aggressive-indent adaptive-wrap ace-window ace-link ace-jump-helm-line helm avy helm-core popup async)))
   '(pdf-view-midnight-colors (quote ("#fdf4c1" . "#1d2021")))
   '(pos-tip-background-color "#073642")
   '(pos-tip-foreground-color "#93a1a1")
   '(smartrep-mode-line-active-bg (solarized-color-blend "#859900" "#073642" 0.2))
   '(term-default-bg-color "#002b36")
   '(term-default-fg-color "#839496")
   '(vc-annotate-background nil)
   '(vc-annotate-background-mode nil)
   '(vc-annotate-color-map
     (quote
      ((20 . "#dc322f")
       (40 . "#cb4366eb20b4")
       (60 . "#c1167942154f")
       (80 . "#b58900")
       (100 . "#a6ae8f7c0000")
       (120 . "#9ed892380000")
       (140 . "#96be94cf0000")
       (160 . "#8e5397440000")
       (180 . "#859900")
       (200 . "#77679bfc4635")
       (220 . "#6d449d465bfd")
       (240 . "#5fc09ea47092")
       (260 . "#4c68a01784aa")
       (280 . "#2aa198")
       (300 . "#303498e7affc")
       (320 . "#2fa1947cbb9b")
       (340 . "#2c879008c736")
       (360 . "#268bd2"))))
   '(vc-annotate-very-old-color nil)
   '(weechat-color-list
     (quote
      (unspecified "#002b36" "#073642" "#a7020a" "#dc322f" "#5b7300" "#859900" "#866300" "#b58900" "#0061a8" "#268bd2" "#a00559" "#d33682" "#007d76" "#2aa198" "#839496" "#657b83")))
   '(xterm-color-names
     ["#073642" "#dc322f" "#859900" "#b58900" "#268bd2" "#d33682" "#2aa198" "#eee8d5"])
   '(xterm-color-names-bright
     ["#002b36" "#cb4b16" "#586e75" "#657b83" "#839496" "#6c71c4" "#93a1a1" "#fdf6e3"]))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )



#+END_SRC
